import time
import logging
from typing import Dict, Any

import psycopg2
from binance.client import Client
from binance import ThreadedWebsocketManager

from config import (
    BINANCE_API_KEY, BINANCE_API_SECRET,
    MIRROR_ENABLED, MIRROR_B_API_KEY, MIRROR_B_API_SECRET,
    MIRROR_COEFFICIENT
)
from db import (
    pg_conn, pg_raw,
    pg_upsert_position, pg_delete_position, pg_get_position,
    wipe_mirror, reset_pending
)
from telegram_bot import tg_a, tg_m

log = logging.getLogger(__name__)

CHILD_TYPES = {
    "STOP","STOP_MARKET","STOP_LOSS","STOP_LOSS_LIMIT",
    "TAKE_PROFIT","TAKE_PROFIT_LIMIT","TAKE_PROFIT_MARKET"
}

def pos_color(side:str) -> str:
    return "üü¢" if side=="LONG" else "üî¥"

def child_color() -> str:
    return "üîµ"

def decode_side(o: Dict[str,Any]) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º, LONG —ç—Ç–æ –∏–ª–∏ SHORT, —É—á–∏—Ç—ã–≤–∞—è reduceOnly (R).
    """
    reduce_flag = bool(o.get("R", False))
    raw_side    = o["S"]  # "BUY" / "SELL"
    if reduce_flag:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º / —É–º–µ–Ω—å—à–∞–µ–º
        if raw_side == "BUY":
            return "SHORT"
        else:
            return "LONG"
    else:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º / —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
        if raw_side == "BUY":
            return "LONG"
        else:
            return "SHORT"

def reason_text(otype: str) -> str:
    """
    "(MARKET)", "(LIMIT)", "(STOP_MARKET)" –∏ —Ç.–ø.
    """
    mp = {
        "MARKET": "(MARKET)",
        "LIMIT": "(LIMIT)",
        "STOP": "(STOP)",
        "STOP_MARKET": "(STOP MARKET)",
        "TAKE_PROFIT": "(TAKE PROFIT)",
        "TAKE_PROFIT_MARKET": "(TAKE PROFIT MARKET)"
    }
    return mp.get(otype, f"({otype})")

def _fmt_float(x: float, digits: int = 4) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ x –Ω–∞ `digits` –∑–Ω–∞–∫–æ–≤ (–¥–ª—è PNL, –±–∞–ª–∞–Ω—Å–∞).
    –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –≤ –∫–æ–Ω—Ü–µ.
    """
    s = f"{x:.{digits}f}"
    return s.rstrip('0').rstrip('.') if '.' in s else s

class AlexBot:
    def __init__(self):
        log.debug("AlexBot.__init__ called")

        self.client_a = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
        self.client_b = (
            Client(MIRROR_B_API_KEY, MIRROR_B_API_SECRET)
            if MIRROR_ENABLED else None
        )

        # –ü—Ä–∏–º–µ—Ä: —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ç–∏–∫‚Äë—Å–∞–π–∑–∞ (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
        self.lot_size_map = {}
        self.price_size_map = {}
        self._init_symbol_precisions()

        # –ó–∞–ø—É—Å–∫ WebSocket
        self.ws = ThreadedWebsocketManager(
            api_key=BINANCE_API_KEY,
            api_secret=BINANCE_API_SECRET
        )
        self.ws.start()
        self.ws.start_futures_user_socket(callback=self._ws_handler)

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ / —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        wipe_mirror()
        reset_pending()
        self._sync_start()
        self._hello()

    # ---------------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è qty/price (–ø—Ä–∏–º–µ—Ä) ----------------
    def _init_symbol_precisions(self):
        """
        –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º binance.futures_exchange_info()
        –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º lot_size_map, price_size_map.
        """
        pass  # –õ–æ–≥–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è dict, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞. –ò–Ω–∞—á–µ –ø—É—Å—Ç–æ.

    def _fmt_qty(self, symbol: str, qty: float) -> str:
        """
        –ó–∞–≥–ª—É—à–∫–∞. –ò–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞:
        d = self.lot_size_map.get(symbol, 3)
        ...
        """
        return f"{qty:.3f}"

    def _fmt_price(self, symbol: str, price: float) -> str:
        return f"{price:.2f}"
    # -----------------------------------------------------------------------

    def _ws_handler(self, msg: Dict[str,Any]):
        pg_raw(msg)
        log.debug("[WS] %s", msg)
        if msg.get("e") == "ORDER_TRADE_UPDATE":
            self._on_order(msg["o"])
            self._diff_positions()

    def _on_order(self, o: Dict[str,Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è ORDER_TRADE_UPDATE.
        –ï—Å–ª–∏ STOP/TAKE FILLED => –ø–µ—á–∞—Ç–∞–µ–º "STOP –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", –∑–∞—Ç–µ–º –∏–¥—ë–º –∫ –ª–æ–≥–∏–∫–µ reduceOnly.
        """
        sym    = o["s"]
        otype  = o["ot"]         # MARKET/LIMIT/STOP...
        status = o["X"]          # NEW/FILLED/CANCELED...
        fill_price = float(o.get("ap", 0))  # –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        fill_qty   = float(o.get("l", 0))   # –æ–±—ä—ë–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        reduce_flag= bool(o.get("R", False))
        side       = decode_side(o)

        # –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL, –∫–æ—Ç–æ—Ä—ã–π Binance —Å–∞–º —Å—á–∏—Ç–∞–µ—Ç (—É—á–∏—Ç—ã–≤–∞—è –∫–æ–º–∏—Å—Å–∏—é)
        partial_pnl = float(o.get("rp", 0.0))
        rtxt = reason_text(otype)

        # --- CANCEL LIMIT ---
        if otype=="LIMIT" and status=="CANCELED":
            price = float(o.get("p", 0))
            qty   = float(o.get("q", 0))
            txt = (f"üîµ Trader: {sym} LIMIT –æ—Ç–º–µ–Ω–µ–Ω. "
                   f"(–ë—ã–ª {pos_color(side)} {side}, –û–±—ä—ë–º: {self._fmt_qty(sym, qty)} "
                   f"–ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, price)}).")
            tg_a(txt)
            pg_delete_position("positions", sym, side)
            if MIRROR_ENABLED:
                pg_delete_position("mirror_positions", sym, side)
                tg_m(f"[Mirror]: {pos_color(side)} Trader: {sym} LIMIT –æ—Ç–º–µ–Ω—ë–Ω (mirror).")
            return

        # --- NEW LIMIT ---
        if otype=="LIMIT" and status=="NEW":
            price = float(o.get("p", 0))
            qty   = float(o.get("q", 0))
            pg_upsert_position("positions", sym, side, 0.0, 0.0, 0.0, "binance", True)
            txt = (f"üîµ Trader: {sym} –ù–æ–≤—ã–π LIMIT {pos_color(side)} {side}. "
                   f"–û–±—ä—ë–º: {self._fmt_qty(sym, qty)} –ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, price)}.")
            tg_a(txt)
            return

        # --- NEW STOP/TAKE ---
        if otype in CHILD_TYPES and status=="NEW":
            trg = float(o.get("sp") or o.get("p") or 0)
            if trg:
                kind = "STOP" if "STOP" in otype else "TAKE"
                tg_a(f"{child_color()} Trader: {sym} {kind} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ü–µ–Ω—É {self._fmt_price(sym, trg)}")
            return

        # ================= FILLED =================
        if status == "FILLED":
            if fill_qty < 1e-12:
                return
            old_amt, old_entry, old_rpnl = pg_get_position("positions", sym, side) or (0.0, 0.0, 0.0)
            new_rpnl = old_rpnl + partial_pnl

            # ---- (1) –ï—Å–ª–∏ —ç—Ç–æ STOP/TAKE, –ø–∏—à–µ–º "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" ----
            if otype in CHILD_TYPES:
                kind = "STOP" if "STOP" in otype else "TAKE"
                # triggerPrice - —ç—Ç–æ –æ–±—ã—á–Ω–æ o["sp"], –Ω–æ fill_price –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º
                trigger_price = float(o.get("sp", 0))
                tg_a(
                    f"{child_color()} Trader: {sym} {kind} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, trigger_price)} "
                    f"(—Ñ–∞–∫—Ç. –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ {self._fmt_price(sym, fill_price)})"
                )

            # ---- (2) –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ reduce-only –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è ----
            if reduce_flag:
                # –∑–∞–∫—Ä—ã—Ç–∏–µ / —É–º–µ–Ω—å—à–µ–Ω–∏–µ
                new_amt = old_amt - fill_qty
                ratio_close = (fill_qty / old_amt)*100 if old_amt>1e-12 else 100
                if ratio_close>100:
                    ratio_close=100

                if new_amt <= 1e-8:
                    # –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    txt = (
                        f"{pos_color(side)} Trader: {sym} –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                        f"({int(round(ratio_close))}%, {self._fmt_qty(sym, old_amt)} --> 0) "
                        f"–ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, fill_price)}, –æ–±—â–∏–π PNL: {_fmt_float(new_rpnl)}"
                    )
                    tg_a(txt)
                    pg_delete_position("positions", sym, side)
                else:
                    # —á–∞—Å—Ç–∏—á–Ω–æ–µ
                    txt = (
                        f"{pos_color(side)} Trader: {sym} —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                        f"({int(round(ratio_close))}%, {self._fmt_qty(sym, old_amt)} --> {self._fmt_qty(sym, new_amt)}) "
                        f"–ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, fill_price)}, —Ç–µ–∫—É—â–∏–π PNL: {_fmt_float(new_rpnl)}"
                    )
                    tg_a(txt)
                    pg_upsert_position("positions", sym, side, new_amt, old_entry, new_rpnl, "binance", False)

                # –∑–µ—Ä–∫–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                if MIRROR_ENABLED:
                    self._mirror_reduce(sym, side, fill_qty, fill_price, partial_pnl)

            else:
                # –û—Ç–∫—Ä—ã—Ç–∏–µ / —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
                new_amt = old_amt + fill_qty
                if old_amt < 1e-12:
                    # –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
                    txt = (
                        f"{pos_color(side)} Trader: {sym} –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} {rtxt} "
                        f"–Ω–∞ {self._fmt_qty(sym, fill_qty)} "
                        f"–ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, fill_price)}"
                    )
                else:
                    ratio_inc = (fill_qty / old_amt)*100 if old_amt>1e-12 else 100
                    if ratio_inc>100:
                        ratio_inc=100
                    txt = (
                        f"{pos_color(side)} Trader: {sym} –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                        f"({int(round(ratio_inc))}%, {self._fmt_qty(sym, old_amt)} --> {self._fmt_qty(sym, new_amt)}) "
                        f"{rtxt} –ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, fill_price)}"
                    )
                tg_a(txt)
                pg_upsert_position("positions", sym, side, new_amt, fill_price, new_rpnl, "binance", False)

                if MIRROR_ENABLED:
                    self._mirror_increase(sym, side, fill_qty, fill_price, rtxt)

    def _mirror_reduce(self, sym: str, side: str, fill_qty: float, fill_price: float, partial_pnl: float):
        """
        –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ / –∑–∞–∫—Ä—ã—Ç–∏–µ.
        """
        old_m_amt, old_m_entry, old_m_rpnl = pg_get_position("mirror_positions", sym, side) or (0.0, 0.0, 0.0)
        reduce_qty = fill_qty * MIRROR_COEFFICIENT
        new_m_pnl  = old_m_rpnl + partial_pnl * MIRROR_COEFFICIENT
        new_m_amt  = old_m_amt - reduce_qty

        ratio_close = (reduce_qty / old_m_amt)*100 if old_m_amt>1e-12 else 100
        if ratio_close>100:
            ratio_close=100

        side_binance = "BUY" if side=="SHORT" else "SELL"
        try:
            self.client_b.futures_create_order(
                symbol=sym,
                side=side_binance,
                type="MARKET",
                quantity=reduce_qty,
                reduceOnly=True
            )
        except Exception as e:
            log.error("_mirror_reduce: create_order error: %s", e)

        if new_m_amt <= 1e-8:
            pg_delete_position("mirror_positions", sym, side)
            tg_m((
                f"[Mirror]: {pos_color(side)} Trader: {sym} –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ {side} "
                f"({int(round(ratio_close))}%, {self._fmt_qty(sym, old_m_amt)} --> 0.0) "
                f"–ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, fill_price)}, PNL: {_fmt_float(new_m_pnl)}"
            ))
        else:
            pg_upsert_position("mirror_positions", sym, side, new_m_amt, old_m_entry, new_m_pnl, "mirror", False)
            tg_m((
                f"[Mirror]: {pos_color(side)} Trader: {sym} —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ {side} "
                f"({int(round(ratio_close))}%, {self._fmt_qty(sym, old_m_amt)} --> {self._fmt_qty(sym, new_m_amt)}) "
                f"–ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, fill_price)}, PNL: {_fmt_float(new_m_pnl)}"
            ))

    def _mirror_increase(self, sym: str, side: str, fill_qty: float, fill_price: float, rtxt: str):
        """
        –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ / —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
        """
        old_m_amt, old_m_entry, old_m_rpnl = pg_get_position("mirror_positions", sym, side) or (0.0, 0.0, 0.0)
        inc_qty = fill_qty * MIRROR_COEFFICIENT
        new_m_amt = old_m_amt + inc_qty
        side_binance = "BUY" if side=="LONG" else "SELL"

        try:
            self.client_b.futures_create_order(
                symbol=sym,
                side=side_binance,
                type="MARKET",
                quantity=inc_qty
            )
        except Exception as e:
            log.error("_mirror_increase: create_order error: %s", e)

        new_m_pnl = old_m_rpnl
        pg_upsert_position("mirror_positions", sym, side, new_m_amt, fill_price, new_m_pnl, "mirror", False)

        if old_m_amt < 1e-12:
            tg_m((
                f"[Mirror]: {pos_color(side)} Trader: {sym} –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} {rtxt} "
                f"–Ω–∞ {self._fmt_qty(sym, inc_qty)}, –¶–µ–Ω–∞: {self._fmt_price(sym, fill_price)}, PNL: {_fmt_float(old_m_rpnl)}"
            ))
        else:
            ratio_inc = (inc_qty / old_m_amt)*100 if old_m_amt>1e-12 else 100
            if ratio_inc>100:
                ratio_inc=100
            tg_m((
                f"[Mirror]: {pos_color(side)} Trader: {sym} –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                f"({int(round(ratio_inc))}%, {self._fmt_qty(sym, old_m_amt)} --> {self._fmt_qty(sym, new_m_amt)}) "
                f"{rtxt} –ø–æ —Ü–µ–Ω–µ {self._fmt_price(sym, fill_price)}, PNL: {_fmt_float(old_m_rpnl)}"
            ))

    def _diff_positions(self):
        log.debug("_diff_positions called")

    def _sync_start(self):
        """
        –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å –ë–î.
        """
        log.debug("_sync_start called")
        # –í–∞—à –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –±—ã–ª (–ø–æ–ª—É—á–∞–µ–º futures_position_information,
        # futures_get_open_orders, pg_upsert_position, —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ –∏–∑ –ë–î).
        pass

    def _hello(self):
        """
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –±–∞–ª–∞–Ω—Å
        """
        log.debug("_hello called")
        tg_m("‚ñ∂Ô∏è  –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")  # –ò —Ç.–¥. –µ—Å–ª–∏ –Ω–∞–¥–æ.   

    def run(self):
        log.debug("AlexBot.run called")
        try:
            log.info("[Main] bot running ... Ctrl+C to stop")
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            tg_m("‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            self.ws.stop()
            log.info("[Main] bye.")