import logging
import time
import json
from typing import Dict, Any

from binance.client import Client
from binance import ThreadedWebsocketManager

from config import (
    BINANCE_API_KEY, BINANCE_API_SECRET,
    MIRROR_ENABLED, MIRROR_B_API_KEY, MIRROR_B_API_SECRET,
    MIRROR_COEFFICIENT
)
from db import (
    pg_raw, pg_upsert_position, wipe_mirror, reset_pending
)
from telegram_bot import tg_a, tg_m

log = logging.getLogger(__name__)

# –ö–∞–∫–∏–µ —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ —Å—á–∏—Ç–∞–µ–º "–¥–æ—á–µ—Ä–Ω–∏–º–∏" –¥–ª—è SL/TP?
CHILD_TYPES = {
    "STOP", "STOP_MARKET", "STOP_LOSS", "STOP_LOSS_LIMIT",
    "TAKE_PROFIT", "TAKE_PROFIT_LIMIT", "TAKE_PROFIT_MARKET"
}

def pos_color(side: str) -> str:
    return "üü¢" if side == "LONG" else "üî¥"

def child_color() -> str:
    return "üîµ"

class AlexBot:
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
        self.client_a = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

        # –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        self.client_b = None
        if MIRROR_ENABLED:
            self.client_b = Client(MIRROR_B_API_KEY, MIRROR_B_API_SECRET)

        # –ó–∞–ø—É—Å–∫ WebSocket
        self.ws = ThreadedWebsocketManager(
            api_key=BINANCE_API_KEY,
            api_secret=BINANCE_API_SECRET
        )
        self.ws.start()
        self.ws.start_futures_user_socket(callback=self._ws_handler)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        wipe_mirror()    # –æ—á–∏—â–∞–µ–º mirror_positions
        reset_pending()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º pending
        self._sync_start()  # –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ LIMIT
        self._hello()       # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –±–∞–ª–∞–Ω—Å—ã

    def _sync_start(self):
        """
        1) –í—ã–≤–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–∏ SL/TP).
        2) –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ pending –≤—Å–µ NEW LIMIT‚Äë–æ—Ä–¥–µ—Ä–∞.
        """
        # 1) –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        try:
            positions = self.client_a.futures_position_information()
            for p in positions:
                amt = float(p["positionAmt"])
                if abs(amt) < 1e-12:
                    continue
                sym = p["symbol"]
                side = "LONG" if amt > 0 else "SHORT"
                price = float(p["entryPrice"])

                # –ù–∞–π–¥—ë–º SL/TP (–¥–æ—á–µ—Ä–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞)
                open_orders = self.client_a.futures_get_open_orders(symbol=sym)
                sl, tp = None, None
                for od in open_orders:
                    if od["type"] in CHILD_TYPES and od["status"]=="NEW":
                        trg = float(od.get("stopPrice") or od.get("price") or 0)
                        if trg:
                            if "STOP" in od["type"]:
                                sl = trg
                            else:
                                tp = trg

                # Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ
                txt = f"{pos_color(side)} (start) Trader: {sym} –û—Ç–∫—Ä—ã—Ç–∞ {side} –û–±—ä—ë–º: {abs(amt)}, –¶–µ–Ω–∞: {price}"
                if sl is not None:
                    txt += f", SL={sl}"
                if tp is not None:
                    txt += f", TP={tp}"
                tg_a(txt)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                pg_upsert_position(
                    "positions", sym, side, abs(amt), price,
                    pnl=0.0, exchange="binance", pending=False
                )
        except Exception as e:
            log.error("_sync_start positions: %s", e)

        # 2) pending LIMIT‚Äë–æ—Ä–¥–µ—Ä–∞
        try:
            orders = self.client_a.futures_get_open_orders()
            for od in orders:
                if od["type"]=="LIMIT" and od["status"]=="NEW":
                    sym   = od["symbol"]
                    price = float(od["price"])
                    qty   = float(od["origQty"])
                    side  = "LONG" if od["side"]=="BUY" else "SHORT"

                    # –ò—â–µ–º SL/TP, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É –ª–∏–º–∏—Ç—É
                    # (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —É—Å–ª–æ–≤–Ω–æ ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ Binance –Ω–µ –≤—Å–µ–≥–¥–∞ —è–≤–Ω–æ —Å–≤—è–∑—ã–≤–∞–µ—Ç)
                    sl, tp = None, None
                    for ch in orders:
                        if (ch["symbol"] == sym and ch["status"]=="NEW"
                                and ch["orderId"] != od["orderId"]
                                and ch["type"] in CHILD_TYPES):
                            trg = float(ch.get("stopPrice") or ch.get("price") or 0)
                            if trg:
                                if "STOP" in ch["type"]:
                                    sl = trg
                                else:
                                    tp = trg

                    txt = (f"üîµ (start) Trader: {sym} –ù–æ–≤—ã–π LIMIT {pos_color(side)} {side}. "
                           f"–û–±—ä—ë–º: {qty} –ø–æ —Ü–µ–Ω–µ {price}.")
                    if sl is not None:
                        txt += f" SL={sl}"
                    if tp is not None:
                        txt += f" TP={tp}"
                    tg_a(txt)

                    pg_upsert_position(
                        "positions", sym, side, qty, price,
                        pnl=0.0, exchange="binance", pending=True
                    )
        except Exception as e:
            log.error("_sync_start limits: %s", e)

    def _hello(self):
        """
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–æ–≤
        """
        bal_a = self._usdt(self.client_a)
        msg = f"‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç: {bal_a:.2f} USDT"

        if self.client_b:
            bal_b = self._usdt(self.client_b)
            msg += f"\n–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω: {bal_b:.2f} USDT"

        tg_m(msg)

    def _ws_handler(self, msg: Dict[str, Any]):
        """
        Callback –¥–ª—è –∫–∞–∂–¥–æ–≥–æ WS-—Å–æ–æ–±—â–µ–Ω–∏—è:
         - –°–æ—Ö—Ä–∞–Ω—è–µ–º "—Å—ã—Ä–æ–µ" –≤ –ë–î (pg_raw)
         - –õ–æ–≥–∏—Ä—É–µ–º
         - –ï—Å–ª–∏ ORDER_TRADE_UPDATE ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º _on_order
           + _diff_positions() (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        pg_raw(msg)
        log.info("[WS] %s", msg)
        if msg.get("e") == "ORDER_TRADE_UPDATE":
            o = msg["o"]
            self._on_order(o)
            self._diff_positions()

    def _on_order(self, o: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ä–¥–µ—Ä–æ–≤:
         - NEW LIMIT
         - CANCELED LIMIT
         - NEW child STOP/TAKE
         - FILLED MARKET/LIMIT (reduceOnly –∏–ª–∏ –Ω–µ—Ç)
        """
        sym    = o["s"]
        otype  = o["ot"]
        status = o["X"]
        side   = "LONG" if o["S"]=="BUY" else "SHORT"

        # --- NEW LIMIT ---
        if otype=="LIMIT" and status=="NEW":
            price = float(o["p"])        # price
            qty   = float(o["q"])        # origQty
            sl, tp = self._find_sl_tp(sym)
            txt = (f"üîµ Trader: {sym} –ù–æ–≤—ã–π LIMIT {pos_color(side)} {side}. "
                   f"–û–±—ä—ë–º: {qty} –ø–æ —Ü–µ–Ω–µ {price}.")
            if sl is not None:
                txt += f" SL={sl}"
            if tp is not None:
                txt += f" TP={tp}"
            tg_a(txt)
            pg_upsert_position("positions", sym, side, qty, price,
                               pnl=0.0, exchange="binance", pending=True)
            return

        # --- CANCELED LIMIT ---
        if otype=="LIMIT" and status=="CANCELED":
            price = float(o.get("p", 0))
            qty   = float(o.get("q", 0))
            txt = (f"üîµ Trader: {sym} LIMIT {price}. "
                   f"{pos_color(side)} {side}, –û–±—ä—ë–º: {qty} –æ—Ç–º–µ–Ω—ë–Ω")
            tg_a(txt)
            # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ pending = False, –æ–±—ä—ë–º = 0
            pg_upsert_position("positions", sym, side, 0.0, 0.0,
                               pnl=0.0, exchange="binance", pending=False)
            return

        # --- NEW child STOP/TAKE ---
        if otype in CHILD_TYPES and status=="NEW":
            trg = float(o.get("sp") or o.get("p") or 0)
            if trg:
                kind = "STOP" if "STOP" in otype else "TAKE"
                tg_a(f"{child_color()} Trader: {sym} {kind} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ü–µ–Ω—É {trg}")
            return

        # --- FILLED (MARKET/LIMIT) ---
        if status == "FILLED":
            reduce_flag = bool(o.get("R", False))
            fill_price  = float(o.get("ap", 0))  # avgPrice
            fill_qty    = float(o.get("l", 0))   # –∏—Å–ø–æ–ª–Ω–µ–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–µ

            if reduce_flag:
                # –û—Ä–¥–µ—Ä —Å —Ñ–ª–∞–≥–æ–º reduceOnly => –∑–∞–∫—Ä—ã—Ç–∏–µ (–∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
                txt = (f"{pos_color(side)} Trader: {sym} (reduce-only) "
                       f"–ó–∞–∫—Ä—ã—Ç–æ {fill_qty} –ø–æ —Ü–µ–Ω–µ {fill_price}")
                tg_a(txt)
                # –¢—É—Ç –º–æ–∂–Ω–æ –ª–∏–±–æ —Å—Ä–∞–∑—É –≤—ã–∑–≤–∞—Ç—å _diff_positions(), 
                # –ª–∏–±–æ —É–º–µ–Ω—å—à–∏—Ç—å –æ–±—ä—ë–º –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ "positions" 
                # –Ω–∞ fill_qty (—Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è).
                # –ù–æ –ø—Ä–æ—â–µ –ø—É—Å—Ç—å _diff_positions() —Å–∞–º–∞ –≤—Å—ë –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç:
            else:
                # –û—Ç–∫—Ä—ã—Ç–∏–µ/—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                txt = (f"{pos_color(side)} Trader: {sym} –û—Ç–∫—Ä—ã—Ç–∞/—É–≤–µ–ª–∏—á–µ–Ω–∞ {side} "
                       f"–Ω–∞ {fill_qty} –ø–æ —Ü–µ–Ω–µ {fill_price}")
                tg_a(txt)
                # –ó–∞–ø–∏—Å—å –≤ –ë–î (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è, –±–µ–∑ —É—á—ë—Ç–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π):
                # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–∂–µ –ª—É—á—à–µ –≤–æ–∑–ª–æ–∂–∏—Ç—å –Ω–∞ _diff_positions().
                # –ù–æ –º–æ–∂–Ω–æ —Ç—É—Ç —Å–¥–µ–ª–∞—Ç—å upsert —Å "qty" = fill_qty 
                # (–∏–ª–∏ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å —á–∞—Å—Ç—è–º–∏).
                # –£–ø—Ä–æ—Å—Ç–∏–º –¥–æ:
                pg_upsert_position("positions", sym, side, fill_qty, fill_price,
                                   pnl=0.0, exchange="binance", pending=False)

                # –ó–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if MIRROR_ENABLED and self.client_b:
                    m_qty = fill_qty * MIRROR_COEFFICIENT
                    resp = self.client_b.futures_create_order(
                        symbol=sym,
                        side="BUY" if side=="LONG" else "SELL",
                        type="MARKET",
                        quantity=m_qty
                    )
                    pg_upsert_position(
                        "mirror_positions", sym, side,
                        m_qty, fill_price, 0.0,
                        exchange="mirror", pending=False
                    )
                    tg_m(f"[Mirror]: {pos_color(side)} Trader: {sym} "
                         f"–û—Ç–∫—Ä—ã—Ç–∞ {side} (by MARKET). –û–±—ä—ë–º: {m_qty}, –¶–µ–Ω–∞: {fill_price}")

    def _find_sl_tp(self, symbol: str):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ SL/TP –¥–ª—è —Å–∏–º–≤–æ–ª–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (sl_price, tp_price) –∏–ª–∏ (None, None).
        """
        sl = tp = None
        try:
            open_orders = self.client_a.futures_get_open_orders(symbol=symbol)
            for od in open_orders:
                if od["type"] in CHILD_TYPES and od["status"]=="NEW":
                    trg = float(od.get("stopPrice") or od.get("price") or 0)
                    if trg:
                        if "STOP" in od["type"]:
                            sl = trg
                        else:
                            tp = trg
        except Exception as e:
            log.error("_find_sl_tp: %s", e)
        return sl, tp

    def _diff_positions(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Binance –∏ –≤ –ë–î.
        –ü—Ä–∏ —Ä–∞–∑–ª–∏—á–∏—è—Ö –æ–±–Ω–æ–≤–ª—è–µ–º, —à–ª—ë–º Telegram.
        –°–µ–π—á–∞—Å –∑–∞–≥–ª—É—à–∫–∞, –ª–æ–≥–∏–∫–∞ –Ω–∞ –±—É–¥—É—â–µ–µ.
        """
        pass

    @staticmethod
    def _usdt(client: Client) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å USDT –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ—å—é—á–µ—Ä—Å-–∫–ª–∏–µ–Ω—Ç–∞.
        """
        try:
            balances = client.futures_account_balance()
            for b in balances:
                if b["asset"] == "USDT":
                    return float(b["balance"])
        except Exception as e:
            log.error("_usdt: %s", e)
        return 0.0

    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Ä–∞–±–æ—Ç–µ, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ—Ä–≤—ë–º Ctrl+C.
        """
        try:
            log.info("[Main] bot running ... Ctrl+C to stop")
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            tg_m("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            self.ws.stop()
            log.info("[Main] bye.")
