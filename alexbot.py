import time
import logging
from typing import Dict, Any

import psycopg2  # –Ω—É–∂–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
from binance.client import Client
from binance import ThreadedWebsocketManager

from config import (
    BINANCE_API_KEY, BINANCE_API_SECRET,
    MIRROR_ENABLED, MIRROR_B_API_KEY, MIRROR_B_API_SECRET,
    MIRROR_COEFFICIENT
)
from db import (
    pg_conn, pg_raw, pg_upsert_position,
    wipe_mirror, reset_pending
)
from telegram_bot import tg_a, tg_m

log = logging.getLogger(__name__)

CHILD_TYPES = {
    "STOP","STOP_MARKET","STOP_LOSS","STOP_LOSS_LIMIT",
    "TAKE_PROFIT","TAKE_PROFIT_LIMIT","TAKE_PROFIT_MARKET"
}

def pos_color(side:str) -> str:
    return "üü¢" if side=="LONG" else "üî¥"

def child_color() -> str:
    return "üîµ"

class AlexBot:
    def __init__(self):
        log.debug("AlexBot.__init__ called")

        self.client_a = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
        self.client_b = (
            Client(MIRROR_B_API_KEY, MIRROR_B_API_SECRET)
            if MIRROR_ENABLED else None
        )

        # –ó–∞–ø—É—Å–∫ WebSocket
        self.ws = ThreadedWebsocketManager(
            api_key=BINANCE_API_KEY,
            api_secret=BINANCE_API_SECRET
        )
        self.ws.start()
        self.ws.start_futures_user_socket(callback=self._ws_handler)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        wipe_mirror()
        reset_pending()
        self._sync_start()
        self._hello()

    @staticmethod
    def _calc_pnl(side: str, entry: float, exit_p: float, qty: float) -> float:
        """
        –ü—Ä–æ—Å—Ç–µ–π—à–∏–π PnL = (exit - entry) * qty * sign
        side=="LONG" => +1
        side=="SHORT" => -1
        """
        sign = 1 if side=="LONG" else -1
        return (exit_p - entry) * qty * sign

    def _ws_handler(self, msg: Dict[str,Any]):
        """
        Callback –Ω–∞ –∫–∞–∂–¥–æ–µ WS-—Å–æ–æ–±—â–µ–Ω–∏–µ:
         - –°–æ—Ö—Ä–∞–Ω—è–µ–º "—Å—ã—Ä–æ–µ" –≤ –ë–î
         - –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ DEBUG (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å)
         - –ï—Å–ª–∏ ORDER_TRADE_UPDATE -> _on_order() + _diff_positions()
        """
        pg_raw(msg)
        log.debug("[WS] %s", msg)

        if msg.get("e") == "ORDER_TRADE_UPDATE":
            o = msg["o"]
            self._on_order(o)
            self._diff_positions()

    def _on_order(self, o: Dict[str,Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ (MARKET/LIMIT; reduce-only –∏–ª–∏ –Ω–µ—Ç).
        –†–∞–∑–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É:
         1) –ï—Å–ª–∏ reduceOnly=true => (—á–∞—Å—Ç–∏—á–Ω–æ–µ/–ø–æ–ª–Ω–æ–µ) –∑–∞–∫—Ä—ã—Ç–∏–µ
         2) –ò–Ω–∞—á–µ => –æ—Ç–∫—Ä—ã—Ç–∏–µ/—É–≤–µ–ª–∏—á–µ–Ω–∏–µ
        """
        sym    = o["s"]        # —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä. "XRPUSDT"
        otype  = o["ot"]       # —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (LIMIT, MARKET, STOP, TAKE_PROFIT, ...)
        status = o["X"]        # —Å—Ç–∞—Ç—É—Å (NEW, FILLED, CANCELED, PARTIALLY_FILLED, ...)
        side   = "LONG" if o["S"]=="BUY" else "SHORT"
        reduce_flag = bool(o.get("R", False))  # R=true => reduceOnly

        # --- CANCELED LIMIT ---
        if otype=="LIMIT" and status=="CANCELED":
            price = float(o.get("p", 0))
            qty   = float(o.get("q", 0))
            txt = (f"üîµ Trader: {sym} LIMIT –æ—Ç–º–µ–Ω–µ–Ω. "
                   f"(–ë—ã–ª {pos_color(side)} {side}, –û–±—ä—ë–º: {qty} –ø–æ —Ü–µ–Ω–µ {price}).")
            tg_a(txt)
            # –ó–∞–ø–∏—à–µ–º –≤ –ë–î, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è = 0 (—Ä–∞–∑ –æ—Ç–º–µ–Ω–∏–ª–∏ –ª–∏–º–∏—Ç)
            pg_upsert_position("positions", sym, side, 0.0, 0.0, 0.0, "binance", False)
            return

        # --- NEW LIMIT ---
        if otype=="LIMIT" and status=="NEW":
            price = float(o.get("p", 0))
            qty   = float(o.get("q", 0))
            txt   = f"üîµ Trader: {sym} –ù–æ–≤—ã–π LIMIT {pos_color(side)} {side}. –û–±—ä—ë–º: {qty} –ø–æ —Ü–µ–Ω–µ {price}."
            tg_a(txt)
            pg_upsert_position("positions", sym, side, qty, price, 0.0, "binance", True)
            return

        # --- NEW child STOP/TAKE ---
        if otype in CHILD_TYPES and status=="NEW":
            trg = float(o.get("sp") or o.get("p") or 0)
            if trg:
                kind = "STOP" if "STOP" in otype else "TAKE"
                tg_a(f"{child_color()} Trader: {sym} {kind} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ü–µ–Ω—É {trg}")
            return

        # --- FILLED (MARKET or LIMIT) ---
        if status == "FILLED":
            fill_price = float(o.get("ap", 0))
            fill_qty   = float(o.get("l", 0))  # –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –≤ —ç—Ç–æ–º –∏–≤–µ–Ω—Ç–µ

            # 1) –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ë–î —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é (amt, entry_price, realized_pnl)
            old_amt = 0.0
            old_entry = 0.0
            old_rpnl = 0.0
            try:
                with pg_conn() as conn, conn.cursor() as cur:
                    cur.execute("""
                        SELECT position_amt, entry_price, realized_pnl
                          FROM public.positions
                         WHERE symbol=%s AND position_side=%s
                    """, (sym, side))
                    row = cur.fetchone()
                    if row:
                        old_amt, old_entry, old_rpnl = float(row[0]), float(row[1]), float(row[2])
            except psycopg2.Error as e:
                log.error("_on_order: DB fetch error: %s", e)

            # 2) –õ–æ–≥–∏–∫–∞ reduce-only => –∑–∞–∫—Ä—ã—Ç–∏–µ / —É–º–µ–Ω—å—à–µ–Ω–∏–µ
            if reduce_flag:
                partial_pnl = self._calc_pnl(side, old_entry, fill_price, fill_qty)
                new_rpnl = old_rpnl + partial_pnl
                new_amt = old_amt - fill_qty
                if new_amt < 1e-8:
                    # –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    new_amt = 0.0
                    txt = (f"{pos_color(side)} Trader: {sym} –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ "
                           f"{side} ({old_amt} --> {new_amt}) –ø–æ —Ü–µ–Ω–µ {old_entry}, "
                           f"—Ç–µ–∫—É—â–∏–π PNL: {new_rpnl:.2f}")
                else:
                    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
                    txt = (f"{pos_color(side)} Trader: {sym} —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ "
                           f"{side} ({old_amt} --> {new_amt}) –ø–æ —Ü–µ–Ω–µ {old_entry}, "
                           f"—Ç–µ–∫—É—â–∏–π PNL: {new_rpnl:.2f}")

                tg_a(txt)
                # –ó–∞–ø–∏—à–µ–º –≤ –ë–î
                pg_upsert_position(
                    "positions", sym, side,
                    new_amt,
                    old_entry if new_amt>0 else 0.0,  # –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é => entry=0
                    new_rpnl,
                    "binance",
                    False
                )

            else:
                # 3) –û—Ç–∫—Ä—ã—Ç–∏–µ / —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
                # –ü—Ä–æ–≤–µ—Ä–∏–º, –±—ã–ª–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è 0 => "–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è" –∏–Ω–∞—á–µ "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                new_amt = old_amt + fill_qty
                if old_amt < 1e-8:
                    # –ø–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ => –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
                    txt = (f"{pos_color(side)} Trader: {sym} –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} "
                           f"–Ω–∞ {fill_qty} –ø–æ —Ü–µ–Ω–µ {fill_price}")
                else:
                    txt = (f"{pos_color(side)} Trader: {sym} –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                           f"({old_amt} --> {new_amt}) –ø–æ —Ü–µ–Ω–µ {fill_price}")

                tg_a(txt)
                pg_upsert_position(
                    "positions", sym, side,
                    new_amt, fill_price,  # entry_price –º–µ–Ω—è–µ–º –Ω–∞ fill_price, —É–ø—Ä–æ—â—ë–Ω–Ω–æ
                    old_rpnl,  # PnL –ø–æ–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    "binance",
                    False
                )

                # –ó–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if MIRROR_ENABLED and self.client_b:
                    m_qty = fill_qty * MIRROR_COEFFICIENT
                    self.client_b.futures_create_order(
                        symbol=sym,
                        side="BUY" if side=="LONG" else "SELL",
                        type="MARKET",
                        quantity=m_qty
                    )
                    pg_upsert_position(
                        "mirror_positions", sym, side,
                        m_qty, fill_price, 0.0,
                        "mirror", False
                    )
                    tg_m(f"[Mirror]: {pos_color(side)} Trader: {sym} "
                         f"–û—Ç–∫—Ä—ã—Ç–∞/—É–≤–µ–ª–∏—á–µ–Ω–∞ {side} (by MARKET). "
                         f"–û–±—ä—ë–º: {m_qty}, –¶–µ–Ω–∞: {fill_price}")

    def _diff_positions(self):
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Binance –∏ –≤ –ë–î ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞.
        """
        log.debug("_diff_positions called")
        pass

    def _sync_start(self):
        """
        –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ + SL/TP;
        –ü–æ–º–µ—Ç–∏—Ç—å NEW LIMIT –æ—Ä–¥–µ—Ä–∞ –∫–∞–∫ pending
        """
        log.debug("_sync_start called")
        try:
            positions = self.client_a.futures_position_information()
            for p in positions:
                amt = abs(float(p["positionAmt"]))
                if amt < 1e-12:
                    continue
                sym   = p["symbol"]
                side  = "LONG" if float(p["positionAmt"])>0 else "SHORT"
                price = float(p["entryPrice"])

                sl = tp = None
                open_orders = self.client_a.futures_get_open_orders(symbol=sym)
                for od in open_orders:
                    if od["type"] in CHILD_TYPES and od["status"]=="NEW":
                        trg = float(od.get("stopPrice") or od.get("price") or 0)
                        if trg:
                            if "STOP" in od["type"]:
                                sl = trg
                            else:
                                tp = trg

                txt = (f"{pos_color(side)} (start) Trader: {sym} "
                       f"–û—Ç–∫—Ä—ã—Ç–∞ {side} –û–±—ä—ë–º: {amt}, –¶–µ–Ω–∞: {price}")
                if sl is not None:
                    txt += f", SL={sl}"
                if tp is not None:
                    txt += f", TP={tp}"
                tg_a(txt)

                pg_upsert_position("positions", sym, side, amt, price, 0.0, "binance", False)
        except Exception as e:
            log.error("_sync_start positions: %s", e)

        # pending LIMIT
        try:
            orders = self.client_a.futures_get_open_orders()
            for od in orders:
                if od["type"]=="LIMIT" and od["status"]=="NEW":
                    sym   = od["symbol"]
                    price = float(od["price"])
                    qty   = float(od["origQty"])
                    side  = "LONG" if od["side"]=="BUY" else "SHORT"

                    sl = tp = None
                    for ch in orders:
                        if (ch["symbol"]==sym and ch["status"]=="NEW"
                                and ch["orderId"]!=od["orderId"]
                                and ch["type"] in CHILD_TYPES):
                            trg = float(ch.get("stopPrice") or ch.get("price") or 0)
                            if trg:
                                if "STOP" in ch["type"]:
                                    sl = trg
                                else:
                                    tp = trg

                    txt = (f"üîµ (start) Trader: {sym} –ù–æ–≤—ã–π LIMIT "
                           f"{pos_color(side)} {side}. –û–±—ä—ë–º: {qty} –ø–æ —Ü–µ–Ω–µ {price}.")
                    if sl is not None:
                        txt += f" SL={sl}"
                    if tp is not None:
                        txt += f" TP={tp}"
                    tg_a(txt)

                    pg_upsert_position("positions", sym, side, qty, price, 0.0, "binance", True)
        except Exception as e:
            log.error("_sync_start limits: %s", e)

    def _hello(self):
        """
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –±–∞–ª–∞–Ω—Å—ã
        """
        log.debug("_hello called")
        bal_a = self._usdt(self.client_a)
        msg   = f"‚ñ∂Ô∏è  –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç: {bal_a:.2f} USDT"
        if self.client_b:
            bal_b = self._usdt(self.client_b)
            msg  += f"\n–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω: {bal_b:.2f} USDT"
        tg_m(msg)

    @staticmethod
    def _usdt(client: Client) -> float:
        log.debug("_usdt called")
        try:
            balances = client.futures_account_balance()
            for b in balances:
                if b["asset"]=="USDT":
                    return float(b["balance"])
        except Exception as e:
            log.error("_usdt: %s", e)
        return 0.0

    def run(self):
        log.debug("AlexBot.run called")
        try:
            log.info("[Main] bot running ... Ctrl+C to stop")
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            tg_m("‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            self.ws.stop()
            log.info("[Main] bye.")