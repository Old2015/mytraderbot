import time
import logging
from typing import Dict, Any

import psycopg2
from binance.client import Client
from binance import ThreadedWebsocketManager

from config import (
    BINANCE_API_KEY, BINANCE_API_SECRET,
    MIRROR_ENABLED, MIRROR_B_API_KEY, MIRROR_B_API_SECRET,
    MIRROR_COEFFICIENT
)
from db import (
    pg_conn, pg_raw,
    pg_upsert_position, pg_delete_position, pg_get_position,
    wipe_mirror, reset_pending
)
from telegram_bot import tg_a, tg_m

log = logging.getLogger(__name__)

CHILD_TYPES = {
    "STOP","STOP_MARKET","STOP_LOSS","STOP_LOSS_LIMIT",
    "TAKE_PROFIT","TAKE_PROFIT_LIMIT","TAKE_PROFIT_MARKET"
}

def pos_color(side:str) -> str:
    return "üü¢" if side=="LONG" else "üî¥"

def child_color() -> str:
    return "üîµ"

def decode_side(o: Dict[str,Any]) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∞—è —ç—Ç–æ —Å—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (LONG/SHORT),
    —É—á–∏—Ç—ã–≤–∞—è –ø–æ–ª–µ reduceOnly (R).
    """
    reduce_flag = bool(o.get("R", False))
    raw_side    = o["S"]  # "BUY" / "SELL"
    if reduce_flag:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º/—É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if raw_side == "BUY":
            return "SHORT"  # closing a short
        else:
            return "LONG"   # closing a long
    else:
        # –û–±—ã—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ/—É–≤–µ–ª–∏—á–µ–Ω–∏–µ
        if raw_side == "BUY":
            return "LONG"
        else:
            return "SHORT"

def reason_text(otype: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "(MARKET)" –∏–ª–∏ "(LIMIT)" –∏ —Ç.–¥.
    –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏
    mp = {
        "MARKET": "(MARKET)",
        "LIMIT": "(LIMIT)",
        "STOP": "(STOP)",
        "STOP_MARKET": "(STOP MARKET)",
        "TAKE_PROFIT": "(TAKE PROFIT)",
        "TAKE_PROFIT_MARKET": "(TAKE PROFIT MARKET)"
    }
    return mp.get(otype, f"({otype})")

class AlexBot:
    def __init__(self):
        log.debug("AlexBot.__init__ called")

        self.client_a = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
        self.client_b = (
            Client(MIRROR_B_API_KEY, MIRROR_B_API_SECRET)
            if MIRROR_ENABLED else None
        )

        # –ó–∞–ø—É—Å–∫ WebSocket
        self.ws = ThreadedWebsocketManager(
            api_key=BINANCE_API_KEY,
            api_secret=BINANCE_API_SECRET
        )
        self.ws.start()
        self.ws.start_futures_user_socket(callback=self._ws_handler)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        wipe_mirror()
        reset_pending()
        self._sync_start()
        self._hello()

    @staticmethod
    def _calc_pnl(side: str, entry: float, exit_p: float, qty: float) -> float:
        """
        –ü—Ä–æ—Å—Ç–µ–π—à–∏–π PnL = (exit - entry) * qty * sign
        side=="LONG" => +1, side=="SHORT" => -1
        """
        sign = 1 if side=="LONG" else -1
        return (exit_p - entry) * qty * sign

    def _ws_handler(self, msg: Dict[str,Any]):
        """
        Callback –Ω–∞ –∫–∞–∂–¥–æ–µ WS-—Å–æ–æ–±—â–µ–Ω–∏–µ:
         - –°–æ—Ö—Ä–∞–Ω—è–µ–º "—Å—ã—Ä–æ–µ" –≤ –ë–î
         - –õ–æ–≥–∏—Ä—É–µ–º (debug)
         - –ï—Å–ª–∏ ORDER_TRADE_UPDATE -> _on_order + _diff_positions
        """
        pg_raw(msg)
        log.debug("[WS] %s", msg)

        if msg.get("e") == "ORDER_TRADE_UPDATE":
            o = msg["o"]
            self._on_order(o)
            self._diff_positions()

    def _on_order(self, o: Dict[str,Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ (MARKET/LIMIT; reduce-only –∏–ª–∏ –Ω–µ—Ç).
        –ü—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏/—Å–Ω—è—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞ ‚Äî —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ positions.
        –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        """
        otype  = o["ot"]        # "LIMIT", "MARKET", ...
        status = o["X"]         # "NEW", "FILLED", "CANCELED", ...
        fill_price = float(o.get("ap", 0))  # —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        fill_qty   = float(o.get("l", 0))   # –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –≤ —ç—Ç–æ–º –∏–≤–µ–Ω—Ç–µ
        reduce_flag= bool(o.get("R", False))
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã (LONG / SHORT)
        side = decode_side(o)

        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ (MARKET), (LIMIT), ...
        rtxt = reason_text(otype)

        # --- CANCELED LIMIT ---
        if otype=="LIMIT" and status=="CANCELED":
            price = float(o.get("p", 0))
            qty   = float(o.get("q", 0))
            txt = (f"üîµ Trader: {o['s']} LIMIT –æ—Ç–º–µ–Ω–µ–Ω. "
                   f"(–ë—ã–ª {pos_color(side)} {side}, –û–±—ä—ë–º: {qty} –ø–æ —Ü–µ–Ω–µ {price}).")
            tg_a(txt)
            # –£–¥–∞–ª—è–µ–º –∏–∑ positions
            pg_delete_position("positions", o["s"], side)
            # –ó–µ—Ä–∫–∞–ª–æ: —É–¥–∞–ª–∏–º —Ç–æ–∂–µ, –µ—Å–ª–∏ –µ—Å—Ç—å?
            if MIRROR_ENABLED and self.client_b:
                pg_delete_position("mirror_positions", o["s"], side)
                tg_m(f"[Mirror]: {pos_color(side)} Trader: {o['s']} LIMIT –æ—Ç–º–µ–Ω–µ–Ω (mirror).")
            return

        # --- NEW LIMIT ---
        if otype=="LIMIT" and status=="NEW":
            price = float(o.get("p", 0))
            qty   = float(o.get("q", 0))
            txt = f"üîµ Trader: {o['s']} –ù–æ–≤—ã–π LIMIT {pos_color(side)} {side}. –û–±—ä—ë–º: {qty} –ø–æ —Ü–µ–Ω–µ {price}."
            tg_a(txt)
            pg_upsert_position("positions", o["s"], side, qty, price, 0.0, "binance", True)
            return

        # --- NEW child STOP/TAKE ---
        if otype in CHILD_TYPES and status=="NEW":
            trg = float(o.get("sp") or o.get("p") or 0)
            if trg:
                kind = "STOP" if "STOP" in otype else "TAKE"
                tg_a(f"{child_color()} Trader: {o['s']} {kind} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ü–µ–Ω—É {trg}")
            return

        # --- FILLED (MARKET or LIMIT or STOP...) ---
        if status == "FILLED":
            # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å qty (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π), –ø—Ä–æ–ø—É—Å—Ç–∏–º
            if fill_qty < 1e-12:
                log.debug("FILLED but fill_qty=0 => skip")
                return

            # –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ –±—ã–ª–æ –≤ –ë–î
            old_pos = pg_get_position("positions", o["s"], side) or (0.0, 0.0, 0.0)
            old_amt, old_entry, old_rpnl = old_pos

            if reduce_flag:
                # =============== –£–ú–ï–ù–¨–®–ï–ù–ò–ï / –ó–ê–ö–†–´–¢–ò–ï ===============
                partial_pnl = self._calc_pnl(side, old_entry, fill_price, fill_qty)
                new_rpnl = old_rpnl + partial_pnl
                new_amt = old_amt - fill_qty

                if old_amt > 1e-12:
                    ratio_close = (fill_qty / old_amt)*100
                else:
                    ratio_close = 100  # –µ—Å–ª–∏ old_amt=0, —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ

                if new_amt <= 1e-8:
                    # –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    new_amt = 0.0
                    txt = (f"{pos_color(side)} Trader: {o['s']} –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                           f"({round(ratio_close)}%, {old_amt} --> {new_amt}) –ø–æ —Ü–µ–Ω–µ {fill_price}, "
                           f"–æ–±—â–∏–π PNL: {new_rpnl:.4f}")
                    tg_a(txt)
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    pg_delete_position("positions", o["s"], side)
                else:
                    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    txt = (f"{pos_color(side)} Trader: {o['s']} —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                           f"({round(ratio_close)}%, {old_amt} --> {new_amt}) –ø–æ —Ü–µ–Ω–µ {fill_price}, "
                           f"—Ç–µ–∫—É—â–∏–π PNL: {new_rpnl:.4f}")
                    tg_a(txt)
                    # –û–±–Ω–æ–≤–ª—è–µ–º
                    pg_upsert_position("positions", o["s"], side, new_amt, old_entry, new_rpnl, "binance", False)

                # –ó–µ—Ä–∫–∞–ª–æ: –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
                if MIRROR_ENABLED and self.client_b:
                    self._mirror_reduce(o["s"], side, fill_qty, fill_price, partial_pnl)
            else:
                # =============== –û–¢–ö–†–´–¢–ò–ï / –£–í–ï–õ–ò–ß–ï–ù–ò–ï ===============
                new_amt = old_amt + fill_qty
                if old_amt < 1e-12:
                    # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    txt = (f"{pos_color(side)} Trader: {o['s']} –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} "
                           f"{rtxt} –Ω–∞ {fill_qty} –ø–æ —Ü–µ–Ω–µ {fill_price}")
                else:
                    ratio_inc = (fill_qty / old_amt)*100 if old_amt>1e-12 else 100
                    txt = (f"{pos_color(side)} Trader: {o['s']} –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                           f"({round(ratio_inc)}%, {old_amt} --> {new_amt}) "
                           f"{rtxt} –ø–æ —Ü–µ–Ω–µ {fill_price}")

                tg_a(txt)
                pg_upsert_position("positions", o["s"], side, new_amt, fill_price, old_rpnl, "binance", False)

                # –ó–µ—Ä–∫–∞–ª–æ: –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
                if MIRROR_ENABLED and self.client_b:
                    self._mirror_increase(o["s"], side, fill_qty, fill_price, rtxt)

    def _mirror_reduce(self, sym: str, side: str, fill_qty: float, fill_price: float, partial_pnl: float):
        """
        –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ / –∑–∞–∫—Ä—ã—Ç–∏–µ (reduce-only).
        """
        old_m = pg_get_position("mirror_positions", sym, side) or (0.0, 0.0, 0.0)
        old_m_amt, old_m_entry, old_m_rpnl = old_m

        reduce_qty = fill_qty * MIRROR_COEFFICIENT
        partial_m_pnl = partial_pnl * MIRROR_COEFFICIENT
        new_m_pnl = old_m_rpnl + partial_m_pnl
        new_m_amt = old_m_amt - reduce_qty

        if old_m_amt > 1e-12:
            ratio_close = (reduce_qty / old_m_amt)*100
        else:
            ratio_close = 100

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reduceOnly MARKET –æ—Ä–¥–µ—Ä
        side_binance = "BUY" if side=="SHORT" else "SELL"  # –æ–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
        # (–ø–æ—Å–∫–æ–ª—å–∫—É –¥–ª—è SHORT -> reduceOnly=BUY, –¥–ª—è LONG->reduceOnly=SELL)
        try:
            self.client_b.futures_create_order(
                symbol=sym,
                side=side_binance,
                type="MARKET",
                quantity=reduce_qty,
                reduceOnly=True  # –≤–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            )
        except Exception as e:
            log.error("_mirror_reduce: create_order error: %s", e)

        if new_m_amt <= 1e-8:
            new_m_amt = 0.0
            pg_delete_position("mirror_positions", sym, side)
            tg_m((f"[Mirror]: {pos_color(side)} Trader: {sym} –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ {side} "
                  f"({round(ratio_close)}%, {old_m_amt} --> 0.0) –ø–æ —Ü–µ–Ω–µ {fill_price}"))
        else:
            pg_upsert_position("mirror_positions", sym, side, new_m_amt, old_m_entry, new_m_pnl, "mirror", False)
            tg_m((f"[Mirror]: {pos_color(side)} Trader: {sym} —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ {side} "
                  f"({round(ratio_close)}%, {old_m_amt} --> {new_m_amt}) –ø–æ —Ü–µ–Ω–µ {fill_price}"))

    def _mirror_increase(self, sym: str, side: str, fill_qty: float, fill_price: float, rtxt: str):
        """
        –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ / —É–≤–µ–ª–∏—á–µ–Ω–∏–µ: –æ–±—ã—á–Ω—ã–π MARKET –æ—Ä–¥–µ—Ä.
        """
        old_m = pg_get_position("mirror_positions", sym, side) or (0.0, 0.0, 0.0)
        old_m_amt, old_m_entry, old_m_rpnl = old_m
        inc_qty = fill_qty * MIRROR_COEFFICIENT
        new_m_amt = old_m_amt + inc_qty

        side_binance = "BUY" if side=="LONG" else "SELL"

        try:
            self.client_b.futures_create_order(
                symbol=sym,
                side=side_binance,
                type="MARKET",
                quantity=inc_qty
            )
        except Exception as e:
            log.error("_mirror_increase: create_order error: %s", e)

        pg_upsert_position("mirror_positions", sym, side, new_m_amt, fill_price, old_m_rpnl, "mirror", False)

        if old_m_amt < 1e-12:
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            tg_m(f"[Mirror]: {pos_color(side)} Trader: {sym} –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} {rtxt} "
                 f"–Ω–∞ {inc_qty}, –¶–µ–Ω–∞: {fill_price}")
        else:
            ratio_inc = (inc_qty / old_m_amt)*100 if old_m_amt>1e-12 else 100
            tg_m(f"[Mirror]: {pos_color(side)} Trader: {sym} –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {side} "
                 f"({round(ratio_inc)}%, {old_m_amt} --> {new_m_amt}) {rtxt} "
                 f"–ø–æ —Ü–µ–Ω–µ {fill_price}")

    def _diff_positions(self):
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Binance –∏ –≤ –ë–î ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞.
        """
        log.debug("_diff_positions called")

    def _sync_start(self):
        """
        –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:
          1) –£–∑–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
          2) –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö –≤ –ë–î
          3) –£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î –≤—Å—ë, —á–µ–≥–æ –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
        """
        log.debug("_sync_start called")
        try:
            # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = self.client_a.futures_position_information()
            real_symbols = set()
            for p in positions:
                amt = float(p["positionAmt"])
                if abs(amt) < 1e-12:
                    continue
                sym   = p["symbol"]
                side  = "LONG" if amt>0 else "SHORT"
                price = float(p["entryPrice"])
                vol = abs(amt)
                real_symbols.add((sym, side))

                # Telegram
                txt = (f"{pos_color(side)} (start) Trader: {sym} "
                       f"–û—Ç–∫—Ä—ã—Ç–∞ {side} –û–±—ä—ë–º: {vol}, –¶–µ–Ω–∞: {price}")
                # SL/TP
                open_orders = self.client_a.futures_get_open_orders(symbol=sym)
                sl = tp = None
                for od in open_orders:
                    if od["type"] in CHILD_TYPES and od["status"]=="NEW":
                        trg = float(od.get("stopPrice") or od.get("price") or 0)
                        if trg:
                            if "STOP" in od["type"]:
                                sl = trg
                            else:
                                tp = trg
                if sl:
                    txt += f", SL={sl}"
                if tp:
                    txt += f", TP={tp}"
                tg_a(txt)

                pg_upsert_position("positions", sym, side, vol, price, 0.0, "binance", False)

            # LIMIT‚Äë–æ—Ä–¥–µ—Ä–∞
            orders = self.client_a.futures_get_open_orders()
            real_limits = set()
            for od in orders:
                if od["type"]=="LIMIT" and od["status"]=="NEW":
                    sym   = od["symbol"]
                    price = float(od["price"])
                    qty   = float(od["origQty"])
                    side  = "LONG" if od["side"]=="BUY" else "SHORT"
                    real_limits.add((sym, side))

                    txt = (f"üîµ (start) Trader: {sym} –ù–æ–≤—ã–π LIMIT {pos_color(side)} {side}. "
                           f"–û–±—ä—ë–º: {qty} –ø–æ —Ü–µ–Ω–µ {price}.")
                    # SL/TP?
                    sl = tp = None
                    for ch in orders:
                        if (ch["symbol"]==sym and ch["status"]=="NEW"
                                and ch["orderId"]!=od["orderId"]
                                and ch["type"] in CHILD_TYPES):
                            trg = float(ch.get("stopPrice") or ch.get("price") or 0)
                            if trg:
                                if "STOP" in ch["type"]:
                                    sl = trg
                                else:
                                    tp = trg
                    if sl:
                        txt += f" SL={sl}"
                    if tp:
                        txt += f" TP={tp}"
                    tg_a(txt)

                    pg_upsert_position("positions", sym, side, qty, price, 0.0, "binance", True)

            # –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–µ–µ –∏–∑ –ë–î
            with pg_conn() as conn, conn.cursor() as cur:
                cur.execute("""
                    SELECT symbol, position_side, position_amt, pending
                      FROM public.positions
                     WHERE exchange='binance'
                """)
                rows = cur.fetchall()
                for (db_sym, db_side, db_amt, db_pending) in rows:
                    db_key = (db_sym, db_side)
                    if db_pending:
                        # LIMIT
                        if db_key not in real_limits:
                            log.info("Removing old LIMIT from DB: %s, %s", db_sym, db_side)
                            pg_delete_position("positions", db_sym, db_side)
                    else:
                        # –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
                        if db_key not in real_symbols:
                            log.info("Removing old POSITION from DB: %s, %s", db_sym, db_side)
                            pg_delete_position("positions", db_sym, db_side)

        except Exception as e:
            log.error("_sync_start positions: %s", e)

    def _hello(self):
        """
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –±–∞–ª–∞–Ω—Å
        """
        log.debug("_hello called")
        bal_a = self._usdt(self.client_a)
        msg   = f"‚ñ∂Ô∏è  –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç: {bal_a:.2f} USDT"
        if self.client_b:
            bal_b = self._usdt(self.client_b)
            msg  += f"\n–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω: {bal_b:.2f} USDT"
        tg_m(msg)

    @staticmethod
    def _usdt(client: Client) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
        """
        log.debug("_usdt called")
        try:
            balances = client.futures_account_balance()
            for b in balances:
                if b["asset"]=="USDT":
                    return float(b["balance"])
        except Exception as e:
            log.error("_usdt: %s", e)
        return 0.0

    def run(self):
        log.debug("AlexBot.run called")
        try:
            log.info("[Main] bot running ... Ctrl+C to stop")
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            tg_m("‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            self.ws.stop()
            log.info("[Main] bye.")